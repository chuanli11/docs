openapi: 3.0.0
info:
  title: 'Projects REST API'
  description: >-
    Create, Update Delete, Get and List Run:AI Projects. <br> <br>
    To streamline resource allocation and  prioritize work, Run:AI introduces the concept of __Projects__. Projects are quota entities that associate a Project name with GPU allocation and allocation preferences. <br> <br>
    A Researcher submitting a Job needs to associate a Project name with the request. The Run:AI scheduler will compare the request against the current allocations and the Project and determine whether the workload can be allocated resources or whether it should remain in the queue for future allocation.
  version: '1.0'
servers:
  - url: 'https://app.run.ai/v1/k8s'
  - url: 'https://staging.run.ai/v1/k8s'
tags:
  - name: Login
  - name: Project
#    description: description of project
paths:
  '/auth/login':
    post: 
      tags:
        - Login
      summary: Login
      security: []
      description: Log in with User/Password to receive a "Bearer" token, which is used to authenticate other API calls.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string      
      responses:
        '200' : 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenant_id:
                    type: integer
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in: 
                    type: integer  
              example:
                tenant_id: 1
                access_token : "<bearer>"
                token_type : "bearer"
                expires_in: 86400
  '/project':
    post:
      tags:
        - Project
      summary: Create a new Project.
      description: Retrieve a Project given a Project ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      requestBody:
#        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'  
            example:
              name: "team-a"
              departmentId: 100
              deservedGpus : 1
              clusterUuid : "fa9b7d1c-2f08-42b8-b608-7b7c1fb40ea1"
              permissions: { "users": [] }
  '/project/{project_id}':
    get:
      tags:
        - Project
      summary: Returns a Project by Id.
      description: Retrieve a Project given a Project ID.
      parameters:
        - name: project_id
          in: path
          required: true
          description: Project ID.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      tags:
        - Project
      summary: Update a Project.
      description: Update a Project by Project ID. The Update API expects all editable Project fields. Fields that are omitted will be removed from the object.
      parameters:
        - name: project_id
          in: path
          required: true
          description: Project ID.
          schema:
            type: integer
            minimum: 1
      requestBody:
#        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'                 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    delete:
      tags:
        - Project
      summary: Delete a Project.
      description: Delete a Project by Project ID. 
      parameters:
        - name: project_id
          in: path
          required: true
          description: Project ID.
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Project with id 389 is deleted
  /clusters/{cluster_uuid}/projects:
    get:
      tags:
        - Project
      summary: List Projects in Cluster.
      description: Get list of all Projects for a given Cluster.
      parameters:
        - name: cluster_uuid
          in: path
          required: true
          description: Cluster Identifier.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
components:
  schemas:    
    Project:
      properties:
        id:
          type: integer
          example: 100
        name:
          type: string
          example: team-a
        tenantId:
          type: integer
          example: 1
        clusterUuid:
          type: string
          format: uuid
          example: fa9b7d1c-2f08-42b8-b608-7b7c1fb40ea1
        createdAt:
          type: string
        departmentId:
          type: integer
        deservedGpus:
          type: integer
        nodeAffinity:
          type: object
          properties:
            train:
              $ref: '#/components/schemas/NodeAffinityType'
            interactive:
              $ref: '#/components/schemas/NodeAffinityType'
        permissions:
          type: object
          properties:
            users:
              type: array
              items:
                type: string
        interactiveJobTimeLimitSecs:
          type: integer
        maxAllowedGpus:
          type: integer
      required:
      - name
      - clusterUuid
      - departmentId
      - deservedGpus
    NodeAffinityType:
      properties:
        affinityType:
          type: string
        selectedTypes:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
            required:
            - id
      required:
      - affinityType
      - selectedTypes  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
